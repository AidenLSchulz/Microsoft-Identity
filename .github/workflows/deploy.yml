name: Deploy App Service (Code + Container Slot)

on:
  push:
    branches: [ "master" ]   # change to "main" if your repo uses main
  workflow_dispatch:
    inputs:
      target:
        description: "What to deploy?"
        required: true
        default: "code"
        type: choice
        options: [ "code", "container" ]
      image_name:
        description: "Docker image name (for container path)"
        required: false
        default: "wp1app"
        type: string

env:
  # --- Common vars ---
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: MicrosoftIdentityAsgSchulz/MicrosoftIdentityAsgSchulz.csproj
  PUBLISH_DIR: ./publish

  # --- Your Azure names ---
  RG: rg-WebProgramming1-Fall2025-bs
  WEBAPP: wp1-17225389-fa25
  SLOT: container-demo

  # --- Set your ACR name (no domain). Ask instructor if unknown. Example: classfa25acr ---
  ACR_NAME: TODO_PUT_ACR_NAME_HERE

jobs:

  # =======================
  # CODE DEPLOY (Production)
  # =======================

  build_code:
    name: Build (.NET) for Production
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && inputs.target == 'code')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.PROJECT_PATH }}"

      - name: Build
        run: dotnet build "${{ env.PROJECT_PATH }}" -c Release --no-restore

      - name: Publish
        run: dotnet publish "${{ env.PROJECT_PATH }}" -c Release --no-build -o "${{ env.PUBLISH_DIR }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app
          path: ${{ env.PUBLISH_DIR }}

  deploy_code:
    name: Deploy to App Service (Production)
    runs-on: ubuntu-latest
    needs: build_code
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && inputs.target == 'code')
    env:
      AZURE_WEBAPP_NAME: ${{ env.WEBAPP }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-app
          path: ${{ env.PUBLISH_DIR }}

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId":        "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret":    "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId":  "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId":        "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Deploy to App Service (Production)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.PUBLISH_DIR }}

  # =======================
  # CONTAINER DEPLOY (Slot)
  # =======================

  build_and_deploy_container:
    name: Build & Deploy Container to Slot
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'container'
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE_NAME: ${{ inputs.image_name }}
    steps:
      - name: Sanity check ACR name
        run: |
          if [ "${{ env.ACR_NAME }}" = "TODO_PUT_ACR_NAME_HERE" ] || [ -z "${{ env.ACR_NAME }}" ]; then
            echo "ERROR: Set env.ACR_NAME in this workflow to your actual ACR name (no domain)."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId":        "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret":    "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId":  "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId":        "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Build Docker image
        run: |
          TAG=${{ github.sha }}
          docker build -f Dockerfile -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG .
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: ACR Login (RBAC)
        run: az acr login --name $ACR_NAME

      - name: Push image to ACR
        run: docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG}

      - name: Point slot at image (Managed Identity)
        run: |
          az webapp config container set \
            -g $RG -n $WEBAPP --slot $SLOT \
            --docker-custom-image-name $ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG} \
            --docker-registry-server-url https://$ACR_NAME.azurecr.io

          # Use Managed Identity for ACR pulls
          az webapp config set -g $RG -n $WEBAPP --slot $SLOT \
            --generic-configurations '{"acrUseManagedIdentityCreds": true}'

          # Ensure ASP.NET listens on the right port
          az webapp config appsettings set -g $RG -n $WEBAPP --slot $SLOT \
            --settings WEBSITES_PORT=8080

      - name: Restart slot
        run: az webapp restart -g $RG -n $WEBAPP --slot $SLOT

      - name: Show container config (sanity)
        run: az webapp config container show -g $RG -n $WEBAPP --slot $SLOT -o jsonc
